#!/bin/sh
# vim: et sw=2 ts=2 tw=0:

__copyright__="Cyrille Pontvieux <jrd@enialis.net>"
__license__="GPLv2+"
__version__="1.0"

cd $(dirname "$0")
# encusre /sbin and /usr/sbin are in the PATH (in case of a sudo)
PATH=/sbin:/usr/sbin:$PATH
export PATH
  
CFG_FILE=~/.config/salixPackaging

usage() {
  cat <<EOF
Usage: salixPackaging [OPTIONS]
Help a packager to manage his/her packages for Salix.

Where OPTIONS are:
  -h, --help This usage
  -V, --version Show the version
  --check Sanity check of Host environment.
  --prepare Prepare the host to install LXC versions of Salix.
  --install=VERSION,ARCH Install a LXC version of Salix for the specified VERSION and ARCH. ARCH could be 'i486' or 'x86_64'.
  --list-installed List all LXC Salix version installed.
  --remove=VERSION,ARCH Remove a LXC Salix version.
  --register Register your information as packager.
  -c, --create Create a new package.
  -e, --edit=PACKAGE_NAME,VERSION,ARCH Edit a PACKAGE_NAME SLKBUILD file for Salix VERSION and ARCH. ARCH could also be 'noarch'.
  -l, --pkg-list Show all packages and their state.
  -p, --pkg-info=PACKAGE_NAME,VERSION Show some information about the PACKAGE_NAME for the Salix VERSION.
  -v, --verify=PACKAGE_NAME,VERSION Verify the latest stable version of the PACKAGE_NAME for the Salix VERSION.
  -a, --verify-all Verify the latest stable version on all packages. Will take some time.
  -b, --build=PACKAGE_NAME,VERSION,ARCH Schedule to build PACKAGE_NAME for Salix version VERSION and ARCH..
  -q, --queue Show the schedule queue.
  -r, --rsync Rsync the local repo to your remote one.
  -t, --ticket=PACKAGE_NAME,VERSION Create a ticket on Salix Tracker about PACKAGE_NAME and Salix VERSION for all built ARCH.
  -i, --interactive Will enter an interactive mode if used with -l, -p, -v, -q. Creating a package (-c), editing a package (-e), and creating a ticket (-t) are always interactive.
EOF
}

show_version() {
  cat <<EOF
salixPackaging v.$__version__
Copyright $__copyright__
License $__license__
EOF
}

usage_ver_arch() {
  cat <<EOF
LXC should be filled in the form:
  version,arch
Where 'version' could be '14.0', '14.1' for example
And 'arch' could be 'i486' or 'x86_64'.
EOF
}

usage_pkg_ver() {
  cat <<EOF
Package should be filled in the form:
  package_name,version
Where 'version' could be '14.0', '14.1' for example.
EOF
}

usage_pkg_ver_arch() {
  cat <<EOF
Package should be filled in the form:
  package_name,version,arch
Where 'version' could be '14.0', '14.1' for example
And 'arch' could be 'i486', 'x86_64' or 'noarch'.
EOF
}

check_root() {
  if [ $(id -u) -ne 0 ]; then
    echo "You should run this action with root privileges." >&2
    exit 1
  fi
}

action_check() {
  ok="[32;1mOK[0m"
  fail="[31;1mFail[0m"
  if lxc-checkconfig; then
    echo "LXC: $ok"
  else
    echo "LXC: $fail"
    return 1
  fi
  echo -n "Arch: "
  if [ $(uname -m) = x86_64 ]; then
    echo "$ok"
  else
    echo "$fail"
    echo "You're not running a 64bits OS, you will not be able to build x86_64 package." >&2
    echo "Please, run a Salix 64bits to make packages." >&2
    return 1
  fi
  echo -n "rc.local: "
  if grep -q lxcbr0 /etc/rc.d/rc.local; then
    echo "$ok"
  else
    echo "$fail"
    echo "rc.local seems not to contain the needed preparation for LXC Bridge." >&2
    echo "Please, launch the prepare action." >&2
    return 1
  fi
  echo -n "Bridge: "
  if ifconfig|grep -q 'lxcbr0:'; then
    echo "$ok"
  else
    echo "$fail"
    echo "lxcbr0 bridge interface seems not to be configured." >&2
    echo "Please, run /etc/rc.d/rc.local to install it." >&2
    return 1
  fi
  return 0
}

action_prepare() {
  check_root
  cat <<'EOF' >> /etc/rc.d/rc.local
# salixPackaging
brctl addbr lxcbr0
brctl setfd lxcbr0 0
networkBase=192.168.100
ifconfig lxcbr0 $networkBase.1 netmask 255.255.255.0 promisc up
extIface=$(ifconfig|grep -B1 'inet '|sed -nr '/^[^:]+:/ { s/^([^:]+):.*/\1/; h }; $ {g;p}')
iptables -t nat -A POSTROUTING -s $networkBase.0/24 -o $extIface -j MASQUERADE
echo 1 > /proc/sys/net/ipv4/ip_forward
EOF
  cat <<'EOF' >> /etc/rc.d/rc.local_shutdown
# salixPackaging
ifconfig lxcbr0 down
brctl delbr lxcbr0
EOF
  brctl addbr lxcbr0
  brctl setfd lxcbr0 0
  networkBase=192.168.100
  ifconfig lxcbr0 $networkBase.1 netmask 255.255.255.0 promisc up
  extIface=$(ifconfig|grep -B1 'inet '|sed -nr '/^[^:]+:/ { s/^([^:]+):.*/\1/; h }; $ {g;p}')
  iptables -t nat -A POSTROUTING -s $networkBase.0/24 -o $extIface -j MASQUERADE
  echo 1 > /proc/sys/net/ipv4/ip_forward
}

action_install() {
  ver=$1
  arch=$2
  check_root
  echo "Creating LXC Salix $ver - $arch"
  # find next number for IP and Mac address
  n=$(lxc-ls|grep '^salixpkg-'|wc -l)
  # host start at 1, so next add +1
  NUMIP=$(($n + 1))
  NUMMAC=$(/bin/echo -e "obase=16\n$n + 1"|bc) # hexa
  conf=$(mktemp)
  sed -r "s/@NUMIP@/$NUMIP/; s/@NUMMAC@/$NUMMAC/;" lxc-default.conf > $conf
  if lxc-create -n salixpkg-$ver-$arch -f $conf -t $PWD/lxc-salix; then
    rm $conf
    if lxc-start -d -n salixpkg-$ver-$arch; then
      echo "LXC started."
      return 0
    else
      echo "Cannot start the LXC." >&2
      return 1
    fi
  else
    rm $conf
    echo "Cannot create the LXC." >&2
    return 1
  fi
}

action_listinstalled() {
  lxc-ls|grep '^salixpkg-'
  return $?
}

action_remove() {
  ver=$1
  arch=$2
  check_root
  echo "Removing LXC Salix $ver - $arch"
  lxc-destroy -n salixpkg-$ver-$arch
  return $?
}

action_register() {
  cat <<EOF
Packager Information
====================

Please give some information about yourself and about your remote repository.
If you don't have a remote repository to hold your packages, please send an
email to the ML http://lists.sourceforge.net/lists/listinfo/salix-main in
order to have a space at people.salixos.org.
If you never already made some packages for Salix, take a look here:
http://docs.salixos.org/wiki/Packaging_rules

Hit Ctrl+C to abort.

EOF
  read -p "Name: " name
  read -p "Email: " email
  defabbrev=$(for n in $(echo "$name"|tr '-' ' '); do echo -n "$n"|sed -r 's/^(.).*/\1/'|tr A-Z a-z; done)
  read -p "Package abbreviation [$defabbrev]: " abbrev
  [ -z "$abbrev" ] && abbrev=$defabbrev
  defurl=http://people.salixos.org/$abbrev
  read -p "Remote URL [$defurl]: " url
  [ -z "$url" ] && url=$defurl
  defscpuri=simplynux.net:www/$abbrev
  read -p "SCP URI for Rsync [$defscpuri]: " scpuri
  [ -z "$scpuri" ] && scpuri=$defscpuri
  defschema=/\$pkgname/\$pkgver-\\\$arch/
  read -p "Schema location [$defschema]: " schema
  [ -z "$schema" ] && schema=$defschema
  check_url $url || return 1
  check_scp_uri $scpuri || return 1
  cat <<EOF > $CFG_FILE
name=$name
email=$email
abbrev=$abbrev
url=$url
scpuri=$scpuri
schema=$schema
EOF
  return 0
}

check_url() {
  url="$1"
  if ! wget -O /dev/null -q "$url"; then
    echo "$url is not valid" >&2
    false
  fi
}

check_scp_uri() {
  scpuri="$1"
  tmp=$(mktemp -d)
  if echo sshfs "$scpuri" $tmp; then # FIXME
    echo fusermount -u $tmp # FIXME
    rmdir $tmp
    true
  else
    rmdir $tmp
    echo "$scpuri is not valid" >&2
    false
  fi
}

action_create() {
  echo create
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_edit() {
  pkgname=$1
  ver=$2
  arch=$3
  echo edit, pkgname=$pkgname, ver=$ver, arch=$arch
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_pkglist() {
  echo pkglist
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_verify() {
  pkgname=$1
  ver=$2
  echo verify, pkgname=$pkgname, ver=$ver
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_verifyall() {
  echo verifyall
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_build() {
  pkgname=$1
  ver=$2
  arch=$3
  echo build, pkgname=$pkgname, ver=$ver, arch=$arch
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_queue() {
  echo queue
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_rsync() {
  echo rsync
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

action_ticket() {
  pkgname=$1
  ver=$2
  echo ticket, pkgname=$pkgname, ver=$ver
  echo INTERACTIVE=$INTERACTIVE
  return 0
}

opts=$(getopt -o 'hVce:lp:v:ab:qrt:i' -l 'help,version,check,prepare,install:,list-installed,remove:,register,create,edit:,pkg-list,pkg-info:,verify:,verify-all,build:,queue,rsync,ticket:,interactive' -- "$@")
ret=$?
if [ $ret -eq 1 ]; then
  usage
  exit $ret
else
  eval set -- $opts
  INTERACTIVE=0
  ACTION=''
  PARAM1=''
  PARAM2=''
  PARAM3=''
  while [ -n "$1" -a "$1" != "--" ]; do
    case "$1" in
      -h|--help)
        shift
        usage
        exit 0
        ;;
      -V|--version)
        shift
        show_version
        exit 0
        ;;
      --check)
        shift
        ACTION=check
        ;;
      --prepare)
        shift
        ACTION=prepare
        ;;
      --install)
        shift
        ACTION=install
        verarch=$1
        shift
        echo "$verarch"|grep -vq '^[^,]\+,[^,]\+$' && usage_ver_arch && exit 1
        PARAM1=$(echo $verarch|cut -d, -f1)
        PARAM2=$(echo $verarch|cut -d, -f2)
        ;;
      --list-installed)
        shift
        ACTION=listinstalled
        ;;
      --remove)
        shift
        ACTION=remove
        verarch=$1
        shift
        echo "$verarch"|grep -vq '^[^,]\+,[^,]\+$' && usage_ver_arch && exit 1
        PARAM1=$(echo $verarch|cut -d, -f1)
        PARAM2=$(echo $verarch|cut -d, -f2)
        ;;
      --register)
        shift
        ACTION=register
        ;;
      -c|--create)
        shift
        ACTION=create
        INTERACTIVE=1
        ;;
      -e|--edit)
        shift
        ACTION=edit
        INTERACTIVE=1
        fullpkg=$1
        shift
        echo "$fullpkg"|grep -vq '^[^,]\+,[^,]\+,[^,]\+$' && usage_pkg_ver_arch && exit 1
        PARAM1=$(echo $fullpkg|cut -d, -f1)
        PARAM2=$(echo $fullpkg|cut -d, -f2)
        PARAM3=$(echo $fullpkg|cut -d, -f3)
        ;;
      -l|--pkg-list)
        shift
        ACTION=pkglist
        ;;
      -p|--pkg-info)
        shift
        ACTION=pkginfo
        fullpkg=$1
        shift
        echo "$fullpkg"|grep -vq '^[^,]\+,[^,]\+$' && usage_pkg_ver && exit 1
        PARAM1=$(echo $fullpkg|cut -d, -f1)
        PARAM2=$(echo $fullpkg|cut -d, -f2)
        ;;
      -v|--verify)
        shift
        ACTION=verify
        fullpkg=$1
        shift
        echo "$fullpkg"|grep -vq '^[^,]\+,[^,]\+$' && usage_pkg_ver && exit 1
        PARAM1=$(echo $fullpkg|cut -d, -f1)
        PARAM2=$(echo $fullpkg|cut -d, -f2)
        ;;
      -a|--verify-all)
        shift
        ACTION=verifyall
        ;;
      -b|--build)
        shift
        ACTION=build
        fullpkg=$1
        shift
        echo "$fullpkg"|grep -vq '^[^,]\+,[^,]\+,[^,]\+$' && usage_pkg_ver_arch && exit 1
        PARAM1=$(echo $fullpkg|cut -d, -f1)
        PARAM2=$(echo $fullpkg|cut -d, -f2)
        PARAM3=$(echo $fullpkg|cut -d, -f3)
        ;;
      -q|--queue)
        shift
        ACTION=queue
        ;;
      -r|--rsync)
        shift
        ACTION=rsync
        ;;
      -t|--ticket)
        shift
        ACTION=ticket
        INTERACTIVE=1
        fullpkg=$1
        shift
        echo "$fullpkg"|grep -vq '^[^,]\+,[^,]\+$' && usage_pkg_ver && exit 1
        PARAM1=$(echo $fullpkg|cut -d, -f1)
        PARAM2=$(echo $fullpkg|cut -d, -f2)
        ;;
      -i|--interactive)
        shift
        INTERACTIVE=1
        ;;
      *)
        echo "Unknown option $1" >&2
        exit 1
    esac
  done
  if [ -z "$ACTION" ]; then
    usage
    exit 1
  else
    action_$ACTION $PARAM1 $PARAM2 $PARAM3
  fi
fi
